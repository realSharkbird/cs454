{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 1. \
Marshalling/Unmarshalling of data:\
When rpcCall is called, the argTypes array is sent to the server so that it knows how to interpret subsequent data. Each element of the argTypes array is then analyzed to determine the transfer protocol from client to server. The input/output bit, type name, and argument length of each argType element is unmarshalled and stored into an int. Once this metadata is extracted, the client begins marshaling the parameters. The client uses the length of each argument and sends them one by one. \
\
The server then receives the arguments according to protocol and marshals them into the server skeletons. The result is returned within the inserted args array. The server then simply marshals the results to the client according to protocol.\
\
Structure of binder database / Round-robin scheduling:\
All data is stored in a map where keys are procedures and values are server locations stored in a queue. When a procedure is called, the corresponding queue is found and the server location at the front of that queue is popped and pushed to the very end of the data structure. Thus achieving simple round-robin scheduling.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Function Overloading:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
Termination procedure:\
When the client calls terminate, it sends a client-binder message to the binder, then a terminate message to let it know that it wishes for it to execute the terminate procedure. The binder then goes through a list of server locations (stored in a queue) built from every rpcInit called by each server and through protocol sends them request messages. Once all the request are sent, the binder closes all it's remaining sockets and finishes execution. All the servers check the ip of the binder before doing the same. \
\
2. \
3. \
4. }